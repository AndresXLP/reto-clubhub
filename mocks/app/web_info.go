// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "franchises-system/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// WebInfo is an autogenerated mock type for the WebInfo type
type WebInfo struct {
	mock.Mock
}

// GetWebInfo provides a mock function with given fields: ctx, url
func (_m *WebInfo) GetWebInfo(ctx context.Context, url string) (entity.WebInfo, error) {
	ret := _m.Called(ctx, url)

	var r0 entity.WebInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.WebInfo, error)); ok {
		return rf(ctx, url)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.WebInfo); ok {
		r0 = rf(ctx, url)
	} else {
		r0 = ret.Get(0).(entity.WebInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWebInfo interface {
	mock.TestingT
	Cleanup(func())
}

// NewWebInfo creates a new instance of WebInfo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWebInfo(t mockConstructorTestingTNewWebInfo) *WebInfo {
	mock := &WebInfo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
