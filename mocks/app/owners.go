// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "franchises-system/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"
)

// Owners is an autogenerated mock type for the Owners type
type Owners struct {
	mock.Mock
}

// CreateOwner provides a mock function with given fields: ctx, owner
func (_m *Owners) CreateOwner(ctx context.Context, owner dto.Owner) error {
	ret := _m.Called(ctx, owner)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Owner) error); ok {
		r0 = rf(ctx, owner)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOwnerByID provides a mock function with given fields: ctx, ID
func (_m *Owners) GetOwnerByID(ctx context.Context, ID int64) (dto.Owner, error) {
	ret := _m.Called(ctx, ID)

	var r0 dto.Owner
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (dto.Owner, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) dto.Owner); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(dto.Owner)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOwners interface {
	mock.TestingT
	Cleanup(func())
}

// NewOwners creates a new instance of Owners. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOwners(t mockConstructorTestingTNewOwners) *Owners {
	mock := &Owners{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
