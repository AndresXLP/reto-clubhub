// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "franchises-system/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"
)

// Franchises is an autogenerated mock type for the Franchises type
type Franchises struct {
	mock.Mock
}

// CreateFranchise provides a mock function with given fields: ctx, request
func (_m *Franchises) CreateFranchise(ctx context.Context, request dto.Franchise) error {
	ret := _m.Called(ctx, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Franchise) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFranchiseByName provides a mock function with given fields: ctx, name
func (_m *Franchises) GetFranchiseByName(ctx context.Context, name string) (dto.Franchise, error) {
	ret := _m.Called(ctx, name)

	var r0 dto.Franchise
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (dto.Franchise, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) dto.Franchise); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(dto.Franchise)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFranchisesByCompanyID provides a mock function with given fields: ctx, companyID
func (_m *Franchises) GetFranchisesByCompanyID(ctx context.Context, companyID int64) (dto.FranchiseWithCompany, error) {
	ret := _m.Called(ctx, companyID)

	var r0 dto.FranchiseWithCompany
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (dto.FranchiseWithCompany, error)); ok {
		return rf(ctx, companyID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) dto.FranchiseWithCompany); ok {
		r0 = rf(ctx, companyID)
	} else {
		r0 = ret.Get(0).(dto.FranchiseWithCompany)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, companyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFranchises interface {
	mock.TestingT
	Cleanup(func())
}

// NewFranchises creates a new instance of Franchises. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFranchises(t mockConstructorTestingTNewFranchises) *Franchises {
	mock := &Franchises{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
