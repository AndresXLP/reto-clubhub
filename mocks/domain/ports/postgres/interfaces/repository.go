// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "franchises-system/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"

	model "franchises-system/internal/infra/adapters/postgres/model"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateCompany provides a mock function with given fields: ctx, companies, location
func (_m *Repository) CreateCompany(ctx context.Context, companies model.Companies, location dto.Location) error {
	ret := _m.Called(ctx, companies, location)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Companies, dto.Location) error); ok {
		r0 = rf(ctx, companies, location)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateFranchise provides a mock function with given fields: ctx, newFranchise, locations
func (_m *Repository) CreateFranchise(ctx context.Context, newFranchise model.Franchises, locations dto.Location) (int64, error) {
	ret := _m.Called(ctx, newFranchise, locations)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Franchises, dto.Location) (int64, error)); ok {
		return rf(ctx, newFranchise, locations)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Franchises, dto.Location) int64); ok {
		r0 = rf(ctx, newFranchise, locations)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Franchises, dto.Location) error); ok {
		r1 = rf(ctx, newFranchise, locations)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOwner provides a mock function with given fields: ctx, newOwner, location
func (_m *Repository) CreateOwner(ctx context.Context, newOwner model.Owners, location dto.Location) error {
	ret := _m.Called(ctx, newOwner, location)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Owners, dto.Location) error); ok {
		r0 = rf(ctx, newOwner, location)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCompanyByID provides a mock function with given fields: ctx, ID
func (_m *Repository) GetCompanyByID(ctx context.Context, ID int64) (dto.Company, error) {
	ret := _m.Called(ctx, ID)

	var r0 dto.Company
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (dto.Company, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) dto.Company); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(dto.Company)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFranchiseByID provides a mock function with given fields: ctx, ID
func (_m *Repository) GetFranchiseByID(ctx context.Context, ID int64) (dto.Franchise, error) {
	ret := _m.Called(ctx, ID)

	var r0 dto.Franchise
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (dto.Franchise, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) dto.Franchise); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(dto.Franchise)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFranchiseByName provides a mock function with given fields: ctx, name
func (_m *Repository) GetFranchiseByName(ctx context.Context, name string) (dto.Franchise, error) {
	ret := _m.Called(ctx, name)

	var r0 dto.Franchise
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (dto.Franchise, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) dto.Franchise); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(dto.Franchise)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFranchisesByCompanyID provides a mock function with given fields: ctx, ID
func (_m *Repository) GetFranchisesByCompanyID(ctx context.Context, ID int64) (dto.Franchises, error) {
	ret := _m.Called(ctx, ID)

	var r0 dto.Franchises
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (dto.Franchises, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) dto.Franchises); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dto.Franchises)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOwnerByID provides a mock function with given fields: ctx, ID
func (_m *Repository) GetOwnerByID(ctx context.Context, ID int64) (dto.Owner, error) {
	ret := _m.Called(ctx, ID)

	var r0 dto.Owner
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (dto.Owner, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) dto.Owner); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(dto.Owner)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAdditionalInfoFranchise provides a mock function with given fields: ctx, info
func (_m *Repository) SetAdditionalInfoFranchise(ctx context.Context, info model.AdditionalFranchiseInfo) error {
	ret := _m.Called(ctx, info)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.AdditionalFranchiseInfo) error); ok {
		r0 = rf(ctx, info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
